package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"
	"strings"

	GIT "github.com/swiftwave-org/swiftwave/pkg/git_manager"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
)

// Deployments is the resolver for the deployments field.
func (r *gitCredentialResolver) Deployments(ctx context.Context, obj *model.GitCredential) ([]*model.Deployment, error) {
	// fetch record
	records, err := core.FindDeploymentsByGitCredentialId(ctx, r.ServiceManager.DbClient, obj.ID)
	if err != nil {
		return nil, err
	}
	// convert to graphql object
	var result = make([]*model.Deployment, 0)
	for _, record := range records {
		result = append(result, deploymentToGraphqlObject(record))
	}
	return result, nil
}

// CreateGitCredential is the resolver for the createGitCredential field.
func (r *mutationResolver) CreateGitCredential(ctx context.Context, input model.GitCredentialInput) (*model.GitCredential, error) {
	record := gitCredentialInputToDatabaseObject(&input, true)
	if record.Name == "" {
		return nil, errors.New("name is required")
	}
	if record.Type == core.GitSsh && (strings.Compare(record.SshPrivateKey, "") == 0 || strings.Compare(record.SshPublicKey, "") == 0) {
		return nil, errors.New("provide a valid ED25519 key in openssh format")
	}
	err := record.Create(ctx, r.ServiceManager.DbClient)
	if err != nil {
		if strings.Contains(err.Error(), "duplicate key") {
			return nil, errors.New("git credential with same name already exists")
		}
		return nil, err
	}
	return gitCredentialToGraphqlObject(record), nil
}

// UpdateGitCredential is the resolver for the updateGitCredential field.
func (r *mutationResolver) UpdateGitCredential(ctx context.Context, id uint, input model.GitCredentialInput) (*model.GitCredential, error) {
	// fetch record
	var record = &core.GitCredential{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	// update record
	newRecord := gitCredentialInputToDatabaseObject(&input, false)
	if newRecord.Name == "" {
		return nil, errors.New("name is required")
	}
	record.Name = input.Name
	record.Type = newRecord.Type
	record.Username = input.Username
	record.Password = input.Password
	record.SshPrivateKey = newRecord.SshPrivateKey
	record.SshPublicKey = newRecord.SshPublicKey
	err = record.Update(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	return gitCredentialToGraphqlObject(record), nil
}

// DeleteGitCredential is the resolver for the deleteGitCredential field.
func (r *mutationResolver) DeleteGitCredential(ctx context.Context, id uint) (bool, error) {
	// fetch record
	var record = &core.GitCredential{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	// delete record
	tx := r.ServiceManager.DbClient.Begin()
	err = record.Delete(ctx, *tx)
	if err != nil {
		tx.Rollback()
		return false, err
	}
	err = tx.Commit().Error
	if err != nil {
		return false, err
	}
	return true, nil
}

// GitCredentials is the resolver for the GitCredentials field.
func (r *queryResolver) GitCredentials(ctx context.Context) ([]*model.GitCredential, error) {
	records, err := core.FindAllGitCredentials(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	var gitCredentials []*model.GitCredential
	for _, record := range records {
		gitCredentials = append(gitCredentials, gitCredentialToGraphqlObject(record))
	}
	return gitCredentials, nil
}

// GitCredential is the resolver for the GitCredential field.
func (r *queryResolver) GitCredential(ctx context.Context, id uint) (*model.GitCredential, error) {
	var record = &core.GitCredential{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	return gitCredentialToGraphqlObject(record), nil
}

// CheckGitCredentialRepositoryAccess is the resolver for the checkGitCredentialRepositoryAccess field.
func (r *queryResolver) CheckGitCredentialRepositoryAccess(ctx context.Context, input model.GitCredentialRepositoryAccessInput) (bool, error) {
	// Fetch git credential
	var gitCredential = &core.GitCredential{}

	if input.GitCredentialID > 0 {
		tx := r.ServiceManager.DbClient.First(&gitCredential, input.GitCredentialID)
		if tx.Error != nil {
			return false, errors.New("git credential not found")
		}
	}
	_, err := GIT.FetchBranches(input.RepositoryURL, gitCredential.Username, gitCredential.Password, gitCredential.SshPrivateKey)
	return err == nil, nil
}

// GitCredential returns GitCredentialResolver implementation.
func (r *Resolver) GitCredential() GitCredentialResolver { return &gitCredentialResolver{r} }

type gitCredentialResolver struct{ *Resolver }
