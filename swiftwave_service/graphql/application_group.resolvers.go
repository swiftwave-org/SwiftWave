package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"

	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
)

// Applications is the resolver for the applications field.
func (r *applicationGroupResolver) Applications(ctx context.Context, obj *model.ApplicationGroup) ([]*model.Application, error) {
	applicationRecords, err := core.FindApplicationsByApplicationGroupID(ctx, r.ServiceManager.DbClient, obj.ID)
	if err != nil {
		return nil, err
	}
	var result = make([]*model.Application, 0)
	for _, record := range applicationRecords {
		result = append(result, applicationToGraphqlObject(record))
	}
	return result, nil
}

// CreateApplicationGroup is the resolver for the createApplicationGroup field.
func (r *mutationResolver) CreateApplicationGroup(ctx context.Context, input model.ApplicationGroupInput) (*model.ApplicationGroup, error) {
	// create application group
	record := applicationGroupInputToDatabaseObject(&input)
	err := record.Create(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	return applicationGroupToGraphqlObject(record), nil
}

// DeleteApplicationGroup is the resolver for the deleteApplicationGroup field.
func (r *mutationResolver) DeleteApplicationGroup(ctx context.Context, id string) (bool, error) {
	// fetch record
	var record = &core.ApplicationGroup{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	// delete record
	err = record.Delete(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return false, err
	}
	return true, nil
}

// ApplicationGroups is the resolver for the applicationGroups field.
func (r *queryResolver) ApplicationGroups(ctx context.Context) ([]*model.ApplicationGroup, error) {
	groups, err := core.FindAllApplicationGroups(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	groupRecords := make([]*model.ApplicationGroup, 0)
	for _, group := range groups {
		groupRecords = append(groupRecords, applicationGroupToGraphqlObject(group))
	}
	return groupRecords, nil
}

// ApplicationGroup is the resolver for the applicationGroup field.
func (r *queryResolver) ApplicationGroup(ctx context.Context, id string) (*model.ApplicationGroup, error) {
	var record = &core.ApplicationGroup{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	return applicationGroupToGraphqlObject(record), nil
}

// ApplicationGroup returns ApplicationGroupResolver implementation.
func (r *Resolver) ApplicationGroup() ApplicationGroupResolver { return &applicationGroupResolver{r} }

type applicationGroupResolver struct{ *Resolver }
