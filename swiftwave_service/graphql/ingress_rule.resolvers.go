package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"
	"fmt"
	"strings"

	haproxymanager "github.com/swiftwave-org/swiftwave/pkg/haproxy_manager"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/core"
	"github.com/swiftwave-org/swiftwave/swiftwave_service/graphql/model"
	"gorm.io/gorm"
)

// Domain is the resolver for the domain field.
func (r *ingressRuleResolver) Domain(ctx context.Context, obj *model.IngressRule) (*model.Domain, error) {
	domain := &core.Domain{}
	if obj.DomainID == nil {
		return nil, nil
	}
	err := domain.FindById(ctx, r.ServiceManager.DbClient, *obj.DomainID)
	if err != nil {
		return nil, err
	}
	return domainToGraphqlObject(domain), nil
}

// Application is the resolver for the application field.
func (r *ingressRuleResolver) Application(ctx context.Context, obj *model.IngressRule) (*model.Application, error) {
	application := &core.Application{}
	if obj.TargetType == model.IngressRuleTargetTypeExternalService {
		return applicationToGraphqlObject(application), nil
	}
	err := application.FindById(ctx, r.ServiceManager.DbClient, obj.ApplicationID)
	if err != nil {
		return nil, err
	}
	return applicationToGraphqlObject(application), nil
}

// BasicAuthAccessControlListName is the resolver for the basicAuthAccessControlListName field.
func (r *ingressRuleResolver) BasicAuthAccessControlListName(ctx context.Context, obj *model.IngressRule) (string, error) {
	if obj.AuthenticationType == model.IngressRuleAuthenticationTypeBasic {
		if obj.BasicAuthAccessControlListID == nil {
			return "", nil
		}
		appBasicAuthAccessControlList := &core.AppBasicAuthAccessControlList{}
		err := appBasicAuthAccessControlList.FindById(ctx, &r.ServiceManager.DbClient, *obj.BasicAuthAccessControlListID)
		if err != nil {
			return "", err
		}
		return appBasicAuthAccessControlList.Name, nil
	} else {
		return "", nil
	}
}

// CreateIngressRule is the resolver for the createIngressRule field.
func (r *mutationResolver) CreateIngressRule(ctx context.Context, input model.IngressRuleInput) (*model.IngressRule, error) {
	record := ingressRuleInputToDatabaseObject(&input)
	if record.TargetType == core.ExternalServiceIngressRule && strings.Compare(record.ExternalService, "") == 0 {
		return nil, errors.New("external service is required")
	}
	restrictedPorts := make([]int, 0)
	for _, port := range r.Config.SystemConfig.RestrictedPorts {
		restrictedPorts = append(restrictedPorts, int(port))
	}
	err := record.Create(ctx, r.ServiceManager.DbClient, restrictedPorts)
	if err != nil {
		return nil, err
	}
	// schedule task
	err = r.WorkerManager.EnqueueIngressRuleApplyRequest(record.ID)
	if err != nil {
		return nil, errors.New("failed to schedule task to apply ingress rule")
	}
	return ingressRuleToGraphqlObject(record), nil
}

// RecreateIngressRule is the resolver for the recreateIngressRule field.
func (r *mutationResolver) RecreateIngressRule(ctx context.Context, id uint) (bool, error) {
	record := core.IngressRule{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	if record.Status == core.IngressRuleStatusDeleting {
		return false, errors.New("ingress rule is deleting")
	}
	// enqueue task
	err = r.WorkerManager.EnqueueIngressRuleApplyRequest(record.ID)
	if err != nil {
		return false, errors.New("failed to schedule task to apply ingress rule")
	}
	return true, nil
}

// EnableHTTPSRedirectIngressRule is the resolver for the enableHttpsRedirectIngressRule field.
func (r *mutationResolver) EnableHTTPSRedirectIngressRule(ctx context.Context, id uint) (bool, error) {
	// fetch the ingress rule
	record := core.IngressRule{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	isValid, err := record.ValidateForHttpsRedirectEnableRequest(ctx, r.ServiceManager.DbClient)
	if !isValid {
		return false, err
	}
	err = r.WorkerManager.EnqueueIngressRuleHttpsRedirectRequest(record.ID, true)
	if err != nil {
		return false, errors.New("failed to schedule task to enable https redirect")
	}
	return true, nil
}

// DisableHTTPSRedirectIngressRule is the resolver for the disableHttpsRedirectIngressRule field.
func (r *mutationResolver) DisableHTTPSRedirectIngressRule(ctx context.Context, id uint) (bool, error) {
	// fetch the ingress rule
	record := core.IngressRule{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	if record.Protocol == core.HTTPSProtocol {
		if !record.HttpsRedirect {
			return false, fmt.Errorf("https redirect is not enabled for this ingress rule")
		}
		err = r.WorkerManager.EnqueueIngressRuleHttpsRedirectRequest(record.ID, false)
		if err != nil {
			return false, errors.New("failed to schedule task to disable https redirect")
		}
		return true, nil
	}
	return false, fmt.Errorf("https redirect is only available for https based ingress rule")
}

// DeleteIngressRule is the resolver for the deleteIngressRule field.
func (r *mutationResolver) DeleteIngressRule(ctx context.Context, id uint) (bool, error) {
	record := core.IngressRule{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	err = record.Delete(ctx, r.ServiceManager.DbClient, false)
	if err != nil {
		if errors.Is(err, core.IngressRuleDeletingError) {
			_ = r.WorkerManager.EnqueueIngressRuleDeleteRequest(record.ID)
		}
		return false, err
	}
	// schedule task
	err = r.WorkerManager.EnqueueIngressRuleDeleteRequest(record.ID)
	if err != nil {
		return false, errors.New("failed to schedule task to delete ingress rule")
	}
	return true, nil
}

// ProtectIngressRuleUsingBasicAuth is the resolver for the protectIngressRuleUsingBasicAuth field.
func (r *mutationResolver) ProtectIngressRuleUsingBasicAuth(ctx context.Context, id uint, appBasicAuthAccessControlListID uint) (bool, error) {
	tx := r.ServiceManager.DbClient.Begin()
	defer tx.Rollback()

	record := core.IngressRule{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}
	if record.Protocol != core.HTTPProtocol && record.Protocol != core.HTTPSProtocol {
		return false, errors.New("basic authentication is supported only for HTTP/HTTPS mode")
	}

	appBasicAuthAccessControlList := core.AppBasicAuthAccessControlList{}
	err = appBasicAuthAccessControlList.FindById(ctx, tx, appBasicAuthAccessControlListID)
	if err != nil {
		return false, err
	}

	domainRecord := core.Domain{}
	err = domainRecord.FindById(ctx, *tx, *record.DomainID)
	if err != nil {
		return false, err
	}

	err = record.ProtectUsingBasicAuth(ctx, *tx, appBasicAuthAccessControlList.ID)
	if err != nil {
		return false, err
	}

	// apply to haproxy + commit
	ctx = context.WithValue(ctx, "domain", domainRecord.Name)
	ctx = context.WithValue(ctx, "bind_port", record.Port)
	ctx = context.WithValue(ctx, "access_control_user_list_name", appBasicAuthAccessControlList.GeneratedName)
	err = r.RunActionsInAllHAProxyNodes(ctx, tx, func(ctx context.Context, db *gorm.DB, transactionId string, manager *haproxymanager.Manager) error {
		domain := ctx.Value("domain").(string)
		port := int(ctx.Value("bind_port").(uint))
		userListName := ctx.Value("access_control_user_list_name").(string)
		return manager.SetupBasicAuthentication(transactionId, haproxymanager.HTTPMode, port, domain, userListName)
	})

	if err != nil {
		return false, err
	}

	// commit to db
	err = tx.Commit().Error
	return err == nil, err
}

// DisableIngressRuleProtection is the resolver for the disableIngressRuleProtection field.
func (r *mutationResolver) DisableIngressRuleProtection(ctx context.Context, id uint) (bool, error) {
	tx := r.ServiceManager.DbClient.Begin()
	defer tx.Rollback()

	record := core.IngressRule{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return false, err
	}

	if record.Authentication.AuthType == core.IngressRuleNoAuthentication {
		return false, errors.New("ingress rule is not protected")
	}

	// disable authentication
	err = record.DisableAuthentication(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return false, err
	}

	if record.Authentication.AuthType == core.IngressRuleBasicAuthentication {
		appBasicAuthAccessControlList := core.AppBasicAuthAccessControlList{}
		err = appBasicAuthAccessControlList.FindById(ctx, tx, *record.Authentication.AppBasicAuthAccessControlListID)
		if err != nil {
			return false, err
		}

		domainRecord := core.Domain{}
		err = domainRecord.FindById(ctx, *tx, *record.DomainID)
		if err != nil {
			return false, err
		}

		// delete from haproxy + commit
		ctx = context.WithValue(ctx, "domain", domainRecord.Name)
		ctx = context.WithValue(ctx, "bind_port", record.Port)
		ctx = context.WithValue(ctx, "access_control_user_list_name", appBasicAuthAccessControlList.GeneratedName)
		err = r.RunActionsInAllHAProxyNodes(ctx, tx, func(ctx context.Context, db *gorm.DB, transactionId string, manager *haproxymanager.Manager) error {
			domain := ctx.Value("domain").(string)
			port := int(ctx.Value("bind_port").(uint))
			userListName := ctx.Value("access_control_user_list_name").(string)
			return manager.RemoveBasicAuthentication(transactionId, haproxymanager.HTTPMode, port, domain, userListName)
		})
		if err != nil {
			return false, err
		}
	} else {
		return false, errors.New("invalid ingress rule")
	}

	err = tx.Commit().Error
	return err == nil, err
}

// IngressRule is the resolver for the ingressRule field.
func (r *queryResolver) IngressRule(ctx context.Context, id uint) (*model.IngressRule, error) {
	record := core.IngressRule{}
	err := record.FindById(ctx, r.ServiceManager.DbClient, id)
	if err != nil {
		return nil, err
	}
	return ingressRuleToGraphqlObject(&record), nil
}

// IngressRules is the resolver for the ingressRules field.
func (r *queryResolver) IngressRules(ctx context.Context) ([]*model.IngressRule, error) {
	records, err := core.FindAllIngressRules(ctx, r.ServiceManager.DbClient)
	if err != nil {
		return nil, err
	}
	var result []*model.IngressRule
	for _, record := range records {
		result = append(result, ingressRuleToGraphqlObject(record))
	}
	return result, nil
}

// IsNewIngressRuleValid is the resolver for the isNewIngressRuleValid field.
func (r *queryResolver) IsNewIngressRuleValid(ctx context.Context, input model.IngressRuleValidationInput) (bool, error) {
	record := ingressRuleValidationInputToDatabaseObject(&input)
	restrictedPorts := make([]int, 0)
	for _, port := range r.Config.SystemConfig.RestrictedPorts {
		restrictedPorts = append(restrictedPorts, int(port))
	}
	if err := record.IsValidNewIngressRule(ctx, r.ServiceManager.DbClient, restrictedPorts); err != nil {
		return false, err
	}
	return true, nil
}

// IngressRule returns IngressRuleResolver implementation.
func (r *Resolver) IngressRule() IngressRuleResolver { return &ingressRuleResolver{r} }

type ingressRuleResolver struct{ *Resolver }
